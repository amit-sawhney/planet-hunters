{"version":3,"sources":["assets/noplanet.jpg","assets/planet.jpg","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","drawer","width","flexShrink","drawerPaper","backgroundColor","drawerContent","color","fontFamily","textAlign","padding","content","flexGrow","palette","background","default","spacing","generateDataBtn","marginTop","height","fontSize","fontWeight","transition","borderRadius","boxShadow","chart","margin","predictPlanet","App","classes","useState","values","setValues","labels","setLabels","isPlanet","setIsPlanet","useEffect","fetch","then","res","json","data","state","datasets","className","Drawer","variant","paper","anchor","Divider","style","Button","onClick","headers","method","body","JSON","stringify","predict","options","title","text","responsive","maintainAspectRatio","legend","alt","src","planet","noPlanet","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAAe,MAA0B,qCCA1B,MAA0B,mCCSnCA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,QAEXC,OAAQ,CACNC,MAPgB,IAQhBC,WAAY,GAEdC,YAAa,CACXF,MAXgB,IAYhBG,gBAAiB,WAEnBC,cAAe,CACbC,MAAO,QACPC,WAAY,gDACZC,UAAW,SACXC,QAAS,OAEXC,QAAS,CACPC,SAAU,EACVP,gBAAiBP,EAAMe,QAAQC,WAAWC,QAC1CL,QAASZ,EAAMkB,QAAQ,GACvBR,WAAY,iDAEdS,gBAAiB,CACfZ,gBAAiB,UACjBE,MAAO,QACPG,QAAS,gBACTQ,UAAW,OACXC,OAAQ,OACRjB,MAAO,OACPkB,SAAU,OACVC,WAAY,OACZC,WAAY,WACZC,aAAc,MACdC,UAAW,8BACX,UAAW,CACTnB,gBAAiB,YAGrBoB,MAAO,CACLvB,MAAO,MACPwB,OAAQ,QAEVC,cAAe,CACblB,UAAW,cA0GAmB,EAtGH,WACV,IAAMC,EAAUjC,IADA,EAGYkC,mBAAS,IAHrB,mBAGTC,EAHS,KAGDC,EAHC,OAIYF,mBAAS,IAJrB,mBAITG,EAJS,KAIDC,EAJC,OAKgBJ,oBAAS,GALzB,mBAKTK,EALS,KAKCC,EALD,KAOhBC,qBAAU,WACRC,MAAM,sBAAsBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GAAI,OAAIV,EAAUU,EAAKX,WAEhFO,MAAM,sBAAsBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GAAI,OAAIR,EAAUQ,EAAKT,aAC/E,IAEH,IAeMU,EAAQ,CACZV,OAAQA,EACRW,SAAU,CACR,CACEvC,gBAAiB,qBACjBqC,KAAMX,KAKZ,OACE,sBAAKc,UAAWhB,EAAQ9B,KAAxB,UACE,cAAC+C,EAAA,EAAD,CACED,UAAWhB,EAAQ5B,OACnB8C,QAAQ,YACRlB,QAAS,CACPmB,MAAOnB,EAAQzB,aAEjB6C,OAAO,OANT,SAQE,sBAAKJ,UAAWhB,EAAQvB,cAAxB,UACE,gDACA,uJACA,mKACA,yKACA,cAAC4C,EAAA,EAAD,CAASC,MAAO,CAAErC,WAAY,QAASI,UAAW,OAAQR,QAAS,SACnE,qDACA,0SAGA,cAACwC,EAAA,EAAD,CAASC,MAAO,CAAErC,WAAY,QAASI,UAAW,OAAQR,QAAS,SACnE,6CACA,oJACA,qBAAKmC,UAAU,iBAAf,SAEE,cAACO,EAAA,EAAD,CAAQC,QAlDK,WACrBf,MAAM,sBAAsBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GAAI,OAAIV,EAAUU,EAAKX,WAEhFO,MAAM,kBAAmB,CACvBgB,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAE3B,OAAQA,MAC9BQ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GAC9BN,EAAYM,EAAKiB,aAuCsBd,UAAWhB,EAAQZ,gBAApD,kCAIN,uBAAM4B,UAAWhB,EAAQlB,QAAzB,UACE,qBAAKkC,UAAWhB,EAAQJ,MAAxB,SACE,cAAC,MAAD,CACEiB,KAAMC,EACNiB,QAAS,CACPC,MAAO,CACL7D,SAAS,EACT8D,KAAM,iBACN1C,SAAU,IAEZ2C,YAAY,EACZC,qBAAqB,EACrBC,OAAQ,CACNjE,SAAS,QAMhBmC,EACC,sBAAKU,UAAWhB,EAAQF,cAAxB,UACE,qEACA,qBAAKuC,IAAI,SAASC,IAAKC,EAAQlE,MAAM,aAGrC,sBAAK2C,UAAWhB,EAAQF,cAAxB,UACE,iFACA,qBAAKuC,IAAI,YAAYC,IAAKE,EAAUnE,MAAM,oBC5IzCoE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.24009594.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/noplanet.8e0a4801.jpg\";","export default __webpack_public_path__ + \"static/media/planet.af38ab4c.jpg\";","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, Divider, Drawer } from '@material-ui/core';\nimport { Bar } from 'react-chartjs-2';\nimport noPlanet from './assets/noplanet.jpg'\nimport planet from './assets/planet.jpg'\n\nconst drawerWidth = 340;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n    backgroundColor: '#475C7A'\n  },\n  drawerContent: {\n    color: 'white',\n    fontFamily: \"Segoe UI, Tahoma, Geneva, Verdana, sans-serif\",\n    textAlign: 'center',\n    padding: '5px'\n  },\n  content: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(3),\n    fontFamily: \"Segoe UI, Tahoma, Geneva, Verdana, sans-serif\",\n  },\n  generateDataBtn: {\n    backgroundColor: '#5395F8',\n    color: 'white',\n    padding: \"0 24px 0 24px\",\n    marginTop: '10px',\n    height: '38px',\n    width: 'auto',\n    fontSize: '12px',\n    fontWeight: 'bold',\n    transition: \"all 0.2s\",\n    borderRadius: \"2px\",\n    boxShadow: \"0 2px 5px 0 rgba(0,0,0,.15)\",\n    \"&:hover\": {\n      backgroundColor: '#84b3fa'\n    }\n  },\n  chart: {\n    width: '70%',\n    margin: 'auto'\n  },\n  predictPlanet: {\n    textAlign: 'center'\n  }\n}));\n\nconst App = () => {\n  const classes = useStyles();\n\n  const [values, setValues] = useState([]);\n  const [labels, setLabels] = useState([]);\n  const [isPlanet, setIsPlanet] = useState(true);\n\n  useEffect(() => {\n    fetch(\"/light-flux-values\").then(res => res.json()).then(data => setValues(data.values));\n\n    fetch(\"/light-flux-labels\").then(res => res.json()).then(data => setLabels(data.labels));\n  }, []);\n\n  const generateValues = () => {\n    fetch(\"/light-flux-values\").then(res => res.json()).then(data => setValues(data.values));\n\n    fetch('/predict-values', {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify({ values: values })\n    }).then(res => res.json()).then(data => {\n      setIsPlanet(data.predict)\n    });\n  }\n\n  const state = {\n    labels: labels,\n    datasets: [\n      {\n        backgroundColor: 'rgba(75,192,192,1)',\n        data: values\n      }\n    ]\n  }\n\n  return (\n    <div className={classes.root}>\n      <Drawer\n        className={classes.drawer}\n        variant=\"permanent\"\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n        anchor=\"left\"\n      >\n        <div className={classes.drawerContent}>\n          <h1>Planet Hunters</h1>\n          <p>This is Group 27's dashboard that visualizes the data and prediction of exoplanets through a developed neural network.</p>\n          <p>This project utilized AWS SageMaker and S3 Buckets to store exoplanet training data, test data, and the development of the models.</p>\n          <p>Over the course of this year, we learned to utilize various features of AWS, tensorflow, and various packages such as pandas and sklearn</p>\n          <Divider style={{ background: 'white', marginTop: '25px', padding: '2px' }} />\n          <h1>Generating the Data</h1>\n          <p>This web app utilizes a traditional Tech Stack of React JS and Flask. The Backend is responsible for randomly generating 1598\n          test values, communicating these values to the front end, and storing the model that is used to predict\n            whether an exoplanet exists or not.</p>\n          <Divider style={{ background: 'white', marginTop: '25px', padding: '2px' }} />\n          <h1>Try it out!</h1>\n          <p>Press the button below to generate a new set of data and see if you get lucky enought to find an arbitray exoplanet</p>\n          <div className=\"generateValues\">\n\n            <Button onClick={generateValues} className={classes.generateDataBtn}>Generate Data</Button>\n          </div>\n        </div>\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.chart}>\n          <Bar\n            data={state}\n            options={{\n              title: {\n                display: true,\n                text: 'Exoplanet data',\n                fontSize: 50,\n              },\n              responsive: true,\n              maintainAspectRatio: true,\n              legend: {\n                display: false,\n              }\n            }}\n          />\n        </div>\n\n        {isPlanet ? (\n          <div className={classes.predictPlanet}>\n            <h2>Congrats! You found an exoplanet!!!</h2>\n            <img alt=\"planet\" src={planet} width=\"300px\" />\n          </div>\n        ) : (\n            <div className={classes.predictPlanet}>\n              <h2>Hm...there doesn't appear to be anything there!</h2>\n              <img alt=\"no planet\" src={noPlanet} width=\"400px\" />\n            </div>\n          )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}